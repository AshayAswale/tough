#ifndef VAL_NAMES_H
#define VAL_NAMES_H

#include <string>
namespace VAL_NAMES
{
    /********* MSGS *********/

	//laser topics
	static const std::string MULTISENSE_LASER_SCAN_TOPIC = "/multisense/lidar_scan";
	static const std::string MULTISENSE_LASER_CLOUD_TOPIC = "/multisense/lidar_points2";
	static const std::string MULTISENSE_LASER_RAW_TOPIC = "/multisense/calibration/raw_lidar_data";

	//image topics
    static const std::string MULTISENSE_LEFT_IMAGE_COLOR_TOPIC = "/multisense/camera/left/image_raw"; //"/multisense/left/image_rect_color";
	static const std::string MULTISENSE_LEFT_DISPARITY_TOPIC = "/multisense/left/disparity";
	static const std::string MULTISENSE_LEFT_DEPTH_TOPIC = "/multisense/depth";
	static const std::string MULTISENSE_DEPTH_COST_TOPIC = "/multisense/left/cost";
	static const std::string MULTISENSE_STEREO_CLOUD_TOPIC = "/multisense/image_points2";
	static const std::string MULTISENSE_RAW_CAM_CONFIG_TOPIC = "/multisense/calibration/raw_cam_config";
    static const std::string MULTISENSE_STEREO_CLOUD_COLOR_TOPIC = "/multisense/image_points2";

	//imu topic
	static const std::string MULTISENSE_IMU_TOPIC = "/atlas/sensors/imu/imu";

	//multisense control topics
	static const std::string MULTISENSE_CONTROL_SERVICE = "/multisense/set_parameters";
	static const std::string MULTISENSE_LED_DUTY_CYCLE = "/multisense/led_duty_cycle";
	static const std::string MULTISENSE_LASER_SPEED = "/multisense/motor_speed";
	static const std::string MULTISENSE_MAX_EXPOSURE = "/multisense/auto_exposure_max_time";

	//multisense GAZEBO ONLY Topics
	static const std::string MULTISENSE_CONTROL_MOTOR_TOPIC = "/multisense/set_spindle_speed";
	static const std::string MULTISENSE_CONTROL_FPS_TOPIC = "/multisense/set_fps";

	//topics generated by us
    static const std::string ASSEMBLED_LASER_CLOUD_TOPIC = "/multisense/points2"; //"/kin_odom_pub/laser_assembled";//"/wrecs/points2";

	//scribble topics
	static const std::string SCRIBBLE_TOPIC = "/drc_gui/scribble";
	static const std::string OBJECT_TYPE_TOPIC = "/drc_gui/object_type";

	//services
	static const std::string PLANE_DETECTION_SERVICE = "/perception/atlas_plane_point_service";
	static const std::string CLOSEST_POINT_SERVICE = "/perception/atlas_closest_point_service";
	static const std::string VISUAL_HAND_SERVO_SERVICE = "/perception/hand_servo_service";
	static const std::string OPERATIONAL_MODE_SERVICE = "/atlas/operational_mode_service";
	static const std::string WALK_ACTION_SERVER = "/walkToTargetAS";
	static const std::string DETECTION_SERVER = "/detect_debrisAS";


	/************************/

	/********* TF Frames *********/

	/* Multisense */
	static const std::string HOKUYO_LINK_TF = "/hokuyo_link";
	static const std::string HEAD_HOKUYO_FRAME_TF = "/head_hokuyo_frame";
	static const std::string LEFT_CAMERA_OPTICAL_FRAME_TF = "/left_camera_optical_frame";

	//Atlas Hand
	static const std::string R_HAND_TF = "r_hand";
	static const std::string R_PALM_TF = "r_palm";
	static const std::string L_HAND_TF = "l_hand";
	static const std::string L_PALM_TF = "l_palm";

	/* Atlas Torso*/
	static const std::string PELVIS_TF = "/pelvis";
	static const std::string IMU_LINK_TF = "/imu_link";

	/* Atlas Right Foot*/
	static const std::string R_UGLUT_TF = "/r_uglut";
	static const std::string R_LGLUT_TF = "/r_lglut";
	static const std::string R_ULEG_TF = "/r_uleg";
	static const std::string R_LLEG_TF = "/r_lleg";
	static const std::string R_TALUS_TF = "/r_talus";
	static const std::string R_FOOT_TF = "/r_foot";

	/* Atlas Left Foot*/
	static const std::string L_UGLUT_TF = "/l_uglut";
	static const std::string L_LGLUT_TF = "/l_lglut";
	static const std::string L_ULEG_TF = "/l_uleg";
	static const std::string L_LLEG_TF = "/l_lleg";
	static const std::string L_TALUS_TF = "/l_talus";
	static const std::string L_FOOT_TF = "/l_foot";


/*****************************/





}

#endif
